#lang pl

#|
We only need to add false to this BNF

<SOL> :: = { <NumList> } ---------------------------------------------------------------------------(1)
        |  { scalar-mult <num> <SOL> } -------------------------------------------------------------(2)
        |  { intersect <SOL> <SOL>} ----------------------------------------------------------------(3)
        |  { union <SOL> <SOL> } -------------------------------------------------------------------(4)
        |  <id> ------------------------------------------------------------------------------------(5)
        |  { with {<id> <SOL>  <id> <SOL>} <SOL> } -------------------------------------------------(6) ;; this should be a syntactic sugar
        |  { fun { <id> <id> } <SOL> } -------------------------------------------------------------(7) ;; a function must have exactly two formal parameters
        |  { call-static <SOL> <SOL> <SOL> } -------------------------------------------------------(8) ;; extends closure environment
        |  { call-dynamic <SOL> <SOL> <SOL> } ------------------------------------------------------(9) ;; extends current environment

        |  True ------------------------------------------------------------------------------------(10)
        |  False -----------------------------------------------------------------------------------(11);; pretty straight forward
        | { if <SOL> then <SOL> else <SOL> } -------------------------------------------------------(12)
        | { equal? <SOL> <SOL> } -------------------------------------------------------------------(13)

<NumList> :: =  λ | <num> <NumList> ;; where λ stands for the empty word, i.e., { } is the empty set

;; where <num> is any expression identified by Racket as a Number
;; and <id> is any expression such that Racket identifies '<id> as a symbol

<SOL> 
 
|#


;; -----------------------------------------------------

;; The abstract syntax tree SOL
(define-type SET = (Listof Number))
(define-type SOL
  ;; Please complete the missing parts -- you are NOT allowed to use additional variants (constructors)
  [Set  SET]
  [Smult Number SOL]
  [Inter SOL SOL]
  [Union SOL SOL]
  [Id    Symbol]
  ;;    [With  Symbol Symbol SOL SOL SOL] -- not to be used, syntactic sugar for ...
  [Fun   Symbol Symbol SOL]
  [CallS SOL SOL SOL]
  [CallD SOL SOL SOL]
  [Bool Boolean]
  [If SOL SOL SOL]
  [Equal SOL SOL]) ;; Just like in the BNF


;; ----------------------------------------------------
;; Operations on SETs
;; Please complete the missing parts, and add comments (comments should specify 
;; the role of each procedure, but also describe your work process). Keep your code readable. 

(: ismember? : Number SET  -> Boolean)
(define (ismember? n l)
  (cond [(null? l) #f]
        [(= n (first l)) #t]
        [else (ismember? n (rest l))]))

(test (not (ismember? 1 '(3 4 5))))
(test (not (ismember? 1 '( 3 2 3 5 6))))
(test (ismember? 1 '(3 4 5 1 3 4)))
(test (ismember? 1 '(1)))

(: remove-duplicates : SET  -> SET)
(define (remove-duplicates l)
  (cond [(or (null? l) (null? (rest l))) l]
        [(ismember? (first l) (rest l)) (remove-duplicates (rest l))]
        [else (cons (first l) (remove-duplicates (rest l)))]))
  
(: create-sorted-set : SET -> SET)
(define (create-sorted-set l)
  (remove-duplicates (sort l <)))
  
(: set-union : SET SET -> SET)
(define (set-union A B)
  (create-sorted-set (append A B)))

(: set-intersection : SET SET -> SET)
(define (set-intersection A B)
  (: mem-filter : Number -> Boolean)
  (define (mem-filter n)
    (ismember? n A))
  (filter mem-filter (create-sorted-set B)))

;; some tests for the functions above
(test (ismember? 1 '(3 4 5)) => #f)
(test (ismember? 1 '()) => #f)
(test (ismember? 1 '(1)) => #t)
(test (ismember? 1 '(1 1 1)) => #t)
(test (ismember? 3 '(1 1 3)) => #t)
;----------------------------------
(test (remove-duplicates '(3 4 5 1 3 4)) => '(5 1 3 4))
(test (remove-duplicates '(1)) => '(1))
(test (remove-duplicates '()) => '())
(test (remove-duplicates '(1 1 1 1 1)) => '(1))
(test (remove-duplicates '(1 1 1 2 2 2 3 3 3)) => '(1 2 3))
;----------------------------------
(test (create-sorted-set '(3 4 5)) => '(3 4 5))
(test (create-sorted-set '( 3 2 3 5 6)) => '(2 3 5 6))
(test (create-sorted-set '()) => '())
(test (create-sorted-set '( 6 6 5 5 4 4 3 3 2 2 1 1)) => '(1 2 3 4 5 6))
;----------------------------------
(test (set-union '(3 4 5) '(3 4 5)) => '(3 4 5))
(test (set-union '(3 4 5) '()) => '(3 4 5))
(test (set-union '(3 4 5) '(1)) => '(1 3 4 5))
(test (set-union '(1 2 3) '(4 5 6)) => '(1 2 3 4 5 6))
(test (set-union '(4 5 6) '(1 2 3)) => '(1 2 3 4 5 6))
;----------------------------------
(test (set-intersection '(3 4 5) '(3 4 5)) => '(3 4 5))
(test (set-intersection '(3 4 5) '(3)) => '(3))
(test (set-intersection '(3 4 5) '(1)) => '())
(test (set-intersection '(3 4 4 5) '(6 4 66 3 4)) => '(3 4))

  


;; ---------------------------------------------------------
;; Parser
;; Please complete the missing parts, and add comments (comments should specify 
;; choices you make, and also describe your work process). Keep your code readable. 
(: parse-sexpr : Sexpr -> SOL)
;; to convert s-expressions into SOLs
(define (parse-sexpr sexpr)
  (match sexpr
    [(list (number: ns) ...) (Set (create-sorted-set ns))] ;; sort and remove-duplicates
    ['True (Bool true)] 
    ['False (Bool false)] ;; If there is true than there is false.
    [(symbol: name) (Id name)]
    ;; with is just like to call a static function and apply it right away.
    [(cons 'with more)
       (match sexpr
         [(list 'with (list (symbol: name1) named1 (symbol: name2) named2) body)
          (CallS (Fun name1 name2 (parse-sexpr body)) (parse-sexpr named1) (parse-sexpr named2))] ;;; We acctually used the tests the figure this out, and that realy helped
         [else (error 'parse-sexpr "bad `with' syntax in ~s" sexpr)])]
    [(cons 'fun more)
       (match sexpr
         [(list 'fun (list (symbol: name1) (symbol: name2)) body)
          (if (equal? name1 name2)
              (error 'parse-sexpr "`fun' has a duplicate param name in ~s" sexpr) ;; cannot use the same param name twice, just throw exception
              (Fun name1 name2 (parse-sexpr body)))]
         [else (error 'parse-sexpr "bad `fun' syntax in ~s" sexpr)])]
    [(list 'scalar-mult (number: sc) rhs) (Smult sc (parse-sexpr rhs))]
    [(list 'intersect lhs rhs) (Inter (parse-sexpr lhs) (parse-sexpr rhs))]
    [(list 'union lhs rhs) (Union (parse-sexpr lhs) (parse-sexpr rhs))]
    [(list 'call-static fun arg1 arg2) (CallS (parse-sexpr fun) (parse-sexpr arg1) (parse-sexpr arg2))]
    [(list 'call-dynamic fun arg1 arg2) (CallD (parse-sexpr fun) (parse-sexpr arg1) (parse-sexpr arg2))] ;; We also need the dynamic option
    [(list 'if cond 'then true-cond 'else false-cond) (If (parse-sexpr cond) (parse-sexpr true-cond) (parse-sexpr false-cond))] ;;; Again we used the tests
    [(list 'equal? set1 set2) (Equal (parse-sexpr set1) (parse-sexpr set2))] ;; Call Equal constructor
    [else (error 'parse-sexpr "bad syntax in ~s" sexpr)]))

(: parse : String -> SOL)
;; parses a string containing a SOL expression to a SOL AST
(define (parse str)
  (parse-sexpr (string->sexpr str)))

;;; Tests for parse
 
(test (parse "{1 2 3  4 1 4  4 2 3 4 1 2 3}") => (Set '(1 2 3 4)))
(test (parse "{union {1 2 3} {4 2 3}}") => (Union (Set '(1 2 3)) (Set '(2 3 4))))
(test (parse "{fun {x x} x}") =error> "parse-sexpr: `fun' has a duplicate param name in (fun (x x) x)")
(test (parse "{intersect {1 2 3} {4 2 3}}") => (Inter (Set '(1 2 3)) (Set '(2 3 4))))
(test (parse "{with {S {intersect {1 2 3} {4 2 3}} c {}}
                 {call-static {fun {x y} {union x S}}
                              {scalar-mult 3 S}
                              {4 5 7 6 9 8 8 8}}}") 
      =>
      (CallS (Fun 'S
                  'c
                  (CallS (Fun 'x 'y (Union (Id 'x) (Id 'S))) 
                         (Smult 3 (Id 'S)) 
                         (Set '(4 5 6 7 8 9))))
             (Inter (Set '(1 2 3)) (Set '(2 3 4)))
             (Set '())))


(test (parse "{with {S {intersect {1 2 3} {4 2 3}} S1 {union {1 2 3} {4 2 3}}}
                          {fun {x} S}}")
      =error> "parse-sexpr: bad `fun' syntax in (fun (x) S)") ;; functions require two formal parameters
(test (parse "True") => (Bool true))
(test (parse "{if {equal? {1 2 3} {1 2}} then {1 2 3} else {1 2}}") =>
      (If (Equal (Set '(1 2 3)) (Set '(1 2))) (Set '(1 2 3)) (Set '(1 2))))

(test (parse "{with {S {intersect {1 2 3} {4 2 3}} c {}}
                 {call-dynamic {fun {x y} {union x S}}
                               {if {equal? S {scalar-mult 3 S}}
                                   then S
                                   else {4 5 7 6 9 8 8 8}}
                               {}}}")
=> (CallS (Fun 'S 'c
               (CallD (Fun 'x 'y (Union (Id 'x) (Id 'S)))
                      (If (Equal (Id 'S) (Smult 3 (Id 'S)))
                          (Id 'S)
                          (Set '(4 5 6 7 8 9)))
                      (Set '())))
          (Inter (Set '(1 2 3)) (Set '(2 3 4)))
          (Set '())))
(test (parse "False") => (Bool false))
(test (parse "{union {1 2 3} {4 2 3} {}}") =error>  "parse-sexpr: bad syntax")
(test (parse "{with S {intersect {1 2 1 3 7 3} {union {1 2 3} {4 2 3}}} {union S S}}") =error> "parse-sexpr: bad `with' syntax")


;;-----------------------------------------------------
;; Evaluation 
#|
------------------------------------------------------
Evaluation rules:
    ;; Please complete the missing parts in the formal specifications below
    eval({ N1 N2 ... Nl })      = sort( create-set({ N1 N2 ... Nl })) ;; where create-set removes all duplications from
                                                                         the sequence (list) and sort is a sorting procedure

    eval({scalar-mult K E})     = { K*N1 K*N2 ... K*Nl }              ;; where eval(E)={ N1 N2 ... Nl }
    eval({intersect E1 E2})     = sort( create-set(set-intersection (eval(E1) , eval(E2)))     
    eval({union E1 E2})         = sort( create-set(set-union (eval(E1) , eval(E2)))
    eval({fun {x1 x2} E},env)   = <{fun {x1 x2} E}, env>
    eval({call-static E-op E1 E2},env)
                                = eval(Ef,extend(x2,eval(E2,env),extend(x1,eval(E1,env),envf)))   ;; We need to add both symbols in the function environment and not the previous environment.
                                                      if eval(E-op,env) = <{fun {x1 x2} Ef}, envf>
                                = error!              otherwise
    eval({call-dynamic E-op E1 E2},env)
                                = eval(Ef,extend(x2,eval(E2,env),extend(x1,eval(E1,env),env)))    ;; In that case it's just like the first subtitution cache we have shared environment for all.
                                                                                                  ;; therfore we extend the previous environment and not the function environment.
                                                                                                  ;; (Also Eran said that this is the oly thing we need to change, in class)
                                                      if eval(E-op,env) = <{fun {x1 x2} Ef}, envf> ;; We still need to check if it's the same function.
                                = error!              otherwise

    eval(True,env)              = true
    eval(False,env)             = false ;; realy straight forward
    eval({if E1 then E2 else E3},env)
                                = eval(E3, env)       if eval(E1,env) = false
                                = eval(E2, env)     otherwise ;; if the condition is true then we want the first outcome (E2)

    eval({equal? E1 E2},env)    = true                if eval(E1,env) is equal in content to eval(E2,env)
                                = false               otherwise





|#

;; Types for environments, values, and a lookup function

(define-type ENV
  [EmptyEnv]
  [Extend Symbol VAL ENV])

(define-type VAL
  [SetV SET]
  [FunV Symbol Symbol SOL ENV]
  [BoolV Boolean]) ;; It is still boolean

(: lookup : Symbol ENV -> VAL)
(define (lookup name env)
  (cases env
    [(EmptyEnv) (error 'lookup "no binding for ~s" name)]
    [(Extend id val rest-env)
     (if (eq? id name) val (lookup name rest-env))]))


;; Auxiliary procedures for eval 
;; Please complete the missing parts, and add comments (comments should specify 
;; the role of each procedure, but also describe your work process). Keep your code readable. 

(: SetV->set : VAL -> SET)
(define (SetV->set v)
  (cases v
    [(SetV S) S]
    [else (error 'SetV->set "expects a set, got: ~s" v)]))
  
(: smult-set : Number VAL -> VAL)
(define (smult-set n s)
  (: mult-op : Number -> Number)
  (define (mult-op k)
    (* k n))
  (SetV (map mult-op (SetV->set s)))) ;; We need to return VAL so we used SetV to turn it into VAL, and the map function
                                      ;; will take every element in the set and multiply it by n (using the function mult-op).

;; some tests for smult-set
(test (smult-set 2 (SetV (list 1 2 3))) => (SetV '(2 4 6)))
(test (smult-set 2 (SetV (list 1 1 1))) => (SetV '(2 2 2)))
(test (smult-set 0 (SetV (list 1 1 1))) => (SetV '(0 0 0)))
(test (smult-set 1 (SetV (list 1 2 3))) => (SetV '(1 2 3)))
(test (smult-set 2 (SetV (list 0 1 0))) => (SetV '(0 2 0)))
(test (smult-set 2 (BoolV false)) =error> "expects a set")



;; In our case all binary functions on SET returns a SET
;; so set-op recives such a function and two SetV
;; and returns SetV and SetV is constructor of VAL.
(: set-op : (SET SET -> SET) VAL VAL -> VAL)
;; gets a binary SET operator, and uses it within a SetV
;; wrapper
(define (set-op op val1 val2)
  (SetV (op (SetV->set val1) (SetV->set val2))))

;; some tests for set-op function
(test (set-op set-union (SetV (list 1 2 3)) (SetV (list 4 5 6))) => (SetV (list 1 2 3 4 5 6)))
(test (set-op set-intersection (SetV (list 1 5 3)) (SetV (list 4 5 6))) => (SetV (list 5)))

;;---------  the eval procedure ------------------------------
;; Please complete the missing parts, and add comments (comments should specify 
;; the choices you make, and also describe your work process). Keep your code readable. 
(: eval : SOL ENV -> VAL)
;; evaluates SOL expressions by reducing them to set values
(define (eval expr env)
  (cases expr
    [(Set S) (SetV  (create-sorted-set S))] ;; We need to return VAL therefore we use SetV.
    [(Smult n set) (smult-set n (eval set env))] ;; like in FLANG we always need to eval the output of the function.
    [(Inter l r) (set-op set-intersection (eval l env) (eval r env))] ;; we need to eval both, left and right.
    [(Union l r)(set-op set-union (eval l env) (eval r env))] ;; set-op works only on intersection and union so there are not many options here.
    [(Id name) (lookup name env)]
    [(Fun bound-id1 bound-id2 bound-body)
     (FunV bound-id1 bound-id2 bound-body env)]
    [(CallS fun-expr arg-expr1 arg-expr2)
     (let ([fval (eval fun-expr env)])
       (cases fval
         [(FunV bound-id1 bound-id2 bound-body f-env)
          (eval bound-body (Extend bound-id2 (eval arg-expr2 env) (Extend bound-id1 (eval arg-expr1 env) f-env)))] ;; eval(Ef,extend(x2,eval(E2,env),extend(x1,eval(E1,env),envf)))
         [else (error 'eval "`call-static' expects a function, got: ~s"
                      fval)]))]
    [(CallD fun-expr arg-expr1 arg-expr2)
     (let ([fval (eval fun-expr env)])
       (cases fval
         [(FunV bound-id1 bound-id2 bound-body f-env)
          (eval bound-body (Extend bound-id2 (eval arg-expr2 env) (Extend bound-id1 (eval arg-expr1 env) env)))] ;; eval(Ef,extend(x2,eval(E2,env),extend(x1,eval(E1,env),env)))
         [else (error 'eval "`call-dynamic' expects a function, got: ~s"
                      fval)]))]
    [(Bool b) (BoolV b)]
    [(If cond true-cond false-cond)
     (let ([cval (eval cond env)])
       (cases cval
         [(BoolV b) (if (equal? b #t) (eval true-cond env) (eval false-cond env))] ;; check either b is true or false, and eval the right argument.
         [else (error 'eval "'if' expects boolean function, got: ~s" cval)]))] ;; else the VAL we got is not boolean.
    [(Equal l r) (if (equal? (eval l env) (eval r env)) (BoolV true) (BoolV false))]))

;eval({if E1 then E2 else E3},env)
;                                = eval(E3, env)       if eval(E1,env) = false
;                                = eval(E2, env)     otherwise

;eval({equal? E1 E2},env)    = true                if eval(E1,env) is equal in content to eval(E2,env)
;                                = false               otherwise

;; we already have all the rules wirtten above so we just need to implement here (we copied some of it here for convinience).

 


(: createGlobalEnv : -> ENV)
(define (createGlobalEnv)
  (Extend 'second (FunV 'p 'spare-param (CallS (Id 'p) (Fun 'a 'b (Id 'b)) (Set '())) (EmptyEnv))
          (Extend 'first (FunV 'p 'spare-param (CallS (Id 'p) (Fun 'a 'b (Id 'a)) (Set '())) (EmptyEnv))
                  (Extend 'cons (FunV 'f 's (Fun 'op 'd (CallD (Id 'op) (Id 'f) (Id 's))) (EmptyEnv))
                          (EmptyEnv)))))

(: run : String -> (U SET VAL Boolean))
;; evaluate a SOL program contained in a string
(define (run str)
  (let ([result (eval (parse str) (createGlobalEnv))])
    (cases result
      [(SetV S) S]
      [(BoolV b) b]
      [else result])))
;; at first we did:
;;(cases result
;;      [(SetV S) S]
;;      [(BoolV b) b]
;;      [(FunV S1 S2 S E) result])
;; but since we have to use the else we changed it as above.



#|
The 'first' and 'second' we needed to add to the global environment
we used only logic, since they are almost the same except that the 'first' returns
the first element and 'second' the second.
The code that was given to us helped us to complete the missing code the 'second'
have the parts that the 'first' didn't and viceversa.
all that left was to determine which call to use, dynamic or static
which we decided by trial and error and saw that we need to use static
and which parametr to use but we only have two (p spare-param). [more information in the open questions]

for the 'cons' case we use kind of anonymos function (just like the lambda in class)
then we call that function dynamically on first and second,
the function will determine if the returned value will be the first or the second.
the last lecture realy helped us to figured this out, and we also used
the help of a friend from Ben Gurion University, this question was pretty tough for us.
the chosen 'call-dynamic' was realy arbitrary and both static and dynamic works.

after we runned those three lines we just copied them to the createGlobalEnv function.
|#

;;(run "{with {cons {fun {f s} {fun {op d} {call-dynamic op f s}}} c{}} cons}") --> (FunV 'f 's (Fun 'op 'd (CallD (Id 'op) (Id 'f) (Id 's))) (EmptyEnv))
;;(run "{with {first {fun {p spare-param} {call-static p {fun {a b} a} {}}} c{}} first}") --> (FunV 'p 'spare-param (CallS (Id 'p) (Fun 'a 'b (Id 'a)) (Set '())) (EmptyEnv))
;;(run "{with {second {fun {p spare-param} {call-static p {fun {a b} b} {}}} spare-param {}} second}") --> (FunV 'p 'spare-param (CallS (Id 'p) (Fun 'a 'b (Id 'b)) (Set '())) (EmptyEnv))


(test (run "{1 2 3  4 1 4  4 2 3 4 1 2 3}") => '(1 2 3 4))
(test (run "{union {1 2 3} {4 2 3}}") => '(1 2 3 4))
(test (run "{intersect {1 2 3} {4 2 3}}") => '( 2 3))
(test (run "{with {S {intersect {1 2 3} {4 2 3}}
                   S1 {}}
                 {call-static {fun {x y} {union x S}}
                              {scalar-mult 3 S}
                              {4 5 7 6 9 8 8 8}}}")
      => '(2 3 6 9))


(test (run "{with {S {intersect {1 2 3} {4 2 3}}
                   S1 {}}
               {call-static {fun {x y} {union x y}}
                              {scalar-mult 3 S}
                              {4 5 7 6 9 8 8 8}}}")
      => '(4 5 6 7 8 9))

(test (run "{with {S1 {fun {x y} {union x y}} S {}} S1}") => (FunV
 'x
 'y
 (Union (Id 'x) (Id 'y))
 (Extend
  'second
  (FunV 'p 'spare-param (CallS (Id 'p) (Fun 'a 'b (Id 'b)) (Set '())) (EmptyEnv))
  (Extend
   'first
   (FunV 'p 'spare-param (CallS (Id 'p) (Fun 'a 'b (Id 'a)) (Set '())) (EmptyEnv))
   (Extend 'cons (FunV 'f 's (Fun 'op 'd (CallD (Id 'op) (Id 'f) (Id 's))) (EmptyEnv)) (EmptyEnv))))))


(test (run "{with {p {call-static cons {1 2 3} {4 2 3}}
                    S1 {}}
              {with {S {intersect {call-static first p {}}
                                  {call-static second p {}}}
                     S1 {}}
                 {call-static {fun {x y} {union x S}}
                              {scalar-mult 3 S}
                              {4 5 7 6 9 8 8 8}}}}")
      =>  '(2 3 6 9))
(test (run "{fun {x x} x}") =error> "parse-sexpr: `fun' has a duplicate param name in (fun (x x) x)")

(test (run "{with {p {call-dynamic cons {1 2 3} {4 2 3}}
                   S1 {}}
              {with {S {intersect {call-dynamic first p {}}
                                  {call-dynamic second p {}}}
                     S1 {}}
                 {call-dynamic {fun {x y} {union x S}}
                              {scalar-mult 3 S}
                              {4 5 7 6 9 8 8 8}}}}")
      =>  '(2 3 6 9))

(test (run "{with {p {call-dynamic {4 2 3} {1} {1}}
                   S1 {}}
              {with {S {intersect {call-dynamic first p {}}
                                  {call-dynamic second p {}}}
                     S1 {}}
                 {call-dynamic {fun {x y} {union x S}}
                              {scalar-mult 3 S}
                              {4 5 7 6 9 8 8 8}}}}")
      =error>  "`call-dynamic' expects a function")

(test (run "{if {equal? {3} {3}} then {3} else {6}}")=>'(3))

(test (run "{if {union {3} {3}} then {3} else {6}}")=error> "'if' expects boolean function")

(test (run "{if {equal? s {3}} then {3} else {6}}")=error> "no binding")

(test (run "{call-static {1} {2 2} {}}")
      =error> "eval: `call-static' expects a function, got: #(struct:SetV (1))")
(test (run "True") => #t)
(test (run "{if {equal? {1 2 3} {1 2}} then {1 2 3} else {1 2}}") => '(1 2))
(test (run "{equal? {union {1 2 3} {4 2 3}} {1 2 3 4}}") => #t)
(test (run "{union {equal? {4} {4}} {4 2 3}}") =error> "SetV->set: expects a set, got: #(struct:BoolV #t)")

(test (run "{with {p {call-static cons {1 2 3} {4 2 3}}
 S1 {}}
 {with {S {intersect {call-static first p {}}
 {call-static second p {}}}
 S1 {}}
 {call-static {fun {x y} {union x S}}
 {scalar-mult 3 S}
 {4 5 7 6 9 8 8 8}}}}")
 => '(2 3 6 9))

(test (run "{with {p {call-static cons {1 2 3} {4 2 3}}
 S1 {}}
 {with {S {intersect {call-static first p {}}
 {call-static second p {}}}
 S1 {}}
 {call-dynamic {fun {x y} {union x S}}
 {scalar-mult 3 S}
 {4 5 7 6 9 8 8 8}}}}")
 => '(2 3 6 9))

(test (run "{with {p {call-static cons {1 2 3} {4 2 3}}
 S1 {}}
 {with {S {intersect {call-static first p {}}
 {call-dynamic second p {}}}
 S1 {}}
 {call-static {fun {x y} {union x S}}
 {scalar-mult 3 S}
 {4 5 7 6 9 8 8 8}}}}")
 => '(2 3 6 9))

(test (run "{with {p {call-static cons {1 2 3} {4 2 3}}
 S1 {}}
 {with {S {intersect {call-dynamic first p {}}
 {call-static second p {}}}
 S1 {}}
 {call-static {fun {x y} {union x S}}
 {scalar-mult 3 S}
 {4 5 7 6 9 8 8 8}}}}")
 => '(2 3 6 9))

(test (run "{with {p {call-dynamic cons {1 2 3} {4 2 3}}
 S1 {}}
 {with {S {intersect {call-static first p {}}
 {call-static second p {}}}
 S1 {}}
 {call-static {fun {x y} {union x S}}
 {scalar-mult 3 S}
 {4 5 7 6 9 8 8 8}}}}")
 => '(2 3 6 9))

(test (run "{with {p {call-static cons {1 2 3} {4 2 3}}
 S1 {}}
 {with {S {intersect {call-static first p {}}
 {call-dynamic second p {}}}
 S1 {}}
 {call-dynamic {fun {x y} {union x S}}
 {scalar-mult 3 S}
 {4 5 7 6 9 8 8 8}}}}")
 => '(2 3 6 9))

(test (run "{with {p {call-static cons {1 2 3} {4 2 3}}
 S1 {}}
 {with {S {intersect {call-dynamic first p {}}
 {call-static second p {}}}
 S1 {}}
 {call-dynamic {fun {x y} {union x S}}
 {scalar-mult 3 S}
 {4 5 7 6 9 8 8 8}}}}")
 => '(2 3 6 9))

(test (run "{with {p {call-dynamic cons {1 2 3} {4 2 3}}
 S1 {}}
 {with {S {intersect {call-static first p {}}
 {call-static second p {}}}
 S1 {}}
 {call-dynamic {fun {x y} {union x S}}
 {scalar-mult 3 S}
 {4 5 7 6 9 8 8 8}}}}")
 => '(2 3 6 9))

(test (run "{with {p {call-static cons {1 2 3} {4 2 3}}
 S1 {}}
 {with {S {intersect {call-dynamic first p {}}
 {call-dynamic second p {}}}
 S1 {}}
 {call-static {fun {x y} {union x S}}
 {scalar-mult 3 S}
 {4 5 7 6 9 8 8 8}}}}")
 => '(2 3 6 9))

(test (run "{with {p {call-dynamic cons {1 2 3} {4 2 3}}
 S1 {}}
 {with {S {intersect {call-static first p {}}
 {call-dynamic second p {}}}
 S1 {}}
 {call-static {fun {x y} {union x S}}
 {scalar-mult 3 S}
 {4 5 7 6 9 8 8 8}}}}")
 => '(2 3 6 9))

(test (run "{with {p {call-dynamic cons {1 2 3} {4 2 3}}
 S1 {}}
 {with {S {intersect {call-dynamic first p {}}
 {call-static second p {}}}
 S1 {}}
 {call-static {fun {x y} {union x S}}
 {scalar-mult 3 S}
 {4 5 7 6 9 8 8 8}}}}")
 => '(2 3 6 9))

(test (run "{with {p {call-static cons {1 2 3} {4 2 3}}
 S1 {}}
 {with {S {intersect {call-dynamic first p {}}
 {call-dynamic second p {}}}
 S1 {}}
 {call-dynamic {fun {x y} {union x S}}
 {scalar-mult 3 S}
 {4 5 7 6 9 8 8 8}}}}")
 => '(2 3 6 9))

(test (run "{with {p {call-dynamic cons {1 2 3} {4 2 3}}
 S1 {}}
 {with {S {intersect {call-static first p {}}
 {call-dynamic second p {}}}
 S1 {}}
 {call-dynamic {fun {x y} {union x S}}
 {scalar-mult 3 S}
 {4 5 7 6 9 8 8 8}}}}")
 => '(2 3 6 9))

(test (run "{with {p {call-dynamic cons {1 2 3} {4 2 3}}
 S1 {}}
 {with {S {intersect {call-dynamic first p {}}
 {call-static second p {}}}
 S1 {}}
 {call-dynamic {fun {x y} {union x S}}
 {scalar-mult 3 S}
 {4 5 7 6 9 8 8 8}}}}")
 => '(2 3 6 9))

(test (run "{with {p {call-dynamic cons {1 2 3} {4 2 3}}
 S1 {}}
 {with {S {intersect {call-dynamic first p {}}
 {call-dynamic second p {}}}
 S1 {}}
 {call-static {fun {x y} {union x S}}
 {scalar-mult 3 S}
 {4 5 7 6 9 8 8 8}}}}")
 => '(2 3 6 9))

(test (run "{with {p {call-dynamic cons {1 2 3} {4 2 3}}
 S1 {}}
 {with {S {intersect {call-dynamic first p {}}
 {call-dynamic second p {}}}
 S1 {}}
 {call-dynamic {fun {x y} {union x S}}
 {scalar-mult 3 S}
 {4 5 7 6 9 8 8 8}}}}")
 => '(2 3 6 9))


#| ----------------------------------------Open Questions----------------------------------------
1. We only need to check what our 'eval' function can return - SET (listof number), Boolean, VAL (function)
and we can see the outputs of the tests, there are SETS, Booleans and functions

2. In the 'with' case we used the call-static because that is more intuative, like we saw on lecture 11
with the subtitution cache, if we have the same parameter multiple time we want the parameter to be linked to
the right function, that is why we put it in different environment, hence call-static is more suitble.
as we said before, 'with' is just a syntactic sugar to staticly call function we just defined.

3. At first we just did that by trial and error, we figured that in 'cons' it does not
realy matter if it is static or dynamic, but 'first' and 'second' has to be static otherwise
we got error of free identifier.
later on we analyse it and understood why 'first' and 'second' have to be static,because
when we call 'first' or 'second' each one have different enivironment that will be over
when we will call the other so on the other we get free identifier.
in 'cons' this is not the case because it's okay to use the same environment.

4. We acctually tried all 16 possibilities, and there was no different, we can show that
by running it like in the subtitution cache model and see it does not matter.
{with {p {call-dynamic cons {1 2 3} {4 2 3}}
 S1 {}}
 {with {S {intersect {call-dynamic first p {}}
 {call-dynamic second p {}}}
 S1 {}}
 {call-dynamic {fun {x y} {union x S}}
 {scalar-mult 3 S}
 {4 5 7 6 9 8 8 8}}}}
'replace all p' => {with {p {call-dynamic cons {1 2 3} {4 2 3}}
 S1 {}}
 {with {S {intersect {call-dynamic first (cons {1 2 3} {4 2 3}) {}}
 {call-dynamic second (cons {1 2 3} {4 2 3}) {}}}
 S1 {}}
 {call-dynamic {fun {x y} {union x S}}
 {scalar-mult 3 S}
 {4 5 7 6 9 8 8 8}}}}
'replace all S' => {with {p {call-dynamic cons {1 2 3} {4 2 3}}
 S1 {}}
 {with {S {intersect {call-dynamic first (cons {1 2 3} {4 2 3}) {}}
 {call-dynamic second (cons {1 2 3} {4 2 3}) {}}}
 S1 {}}
 {call-dynamic {fun {x y} {union x {2 3}}}
 {scalar-mult 3 {2 3}}
 {4 5 7 6 9 8 8 8}}}}
'replace all x' => {with {p {call-dynamic cons {1 2 3} {4 2 3}}
 S1 {}}
 {with {S {intersect {call-dynamic first (cons {1 2 3} {4 2 3}) {}}
 {call-dynamic second (cons {1 2 3} {4 2 3}) {}}}
 S1 {}}
 {call-dynamic {fun {x y} {union {4 9} {2 3}}}
 {scalar-mult 3 {2 3}}
 {4 5 7 6 9 8 8 8}}}}
'evel' => {2 3 4 9}

so the closure remains the same and that is why it does
not matter either we use static or dynamic.


|#

#|--------------------Remarks on the work--------------------
We worked on this work togethere and it took us about 10 hours,
the first segmant of the work went pretty quick and the code kind
of wrote itself as we dont have much options to put.
our main struggle was in the global environment and it took
big part of the time we worked on this, it was realy hard to figure
out what to write on the 'cons' of the global environment and we had
to use the help of our friend who studies at Ben Gurion university.
over all we think that this work realy helped us to understand the
material of the course and helped us to get ready for the exam.

Matan Greenberg 206094815
Roi Mash 205687544
|#